---
- pause:
    seconds: 5
    prompt: |
      the rh_mobb {{ role_name }} role is being deprecated for the
      more modular rh_mobb rosa_cluster role.  Consider switching.

# - set_fact:
#       http_proxy: "{{ proxy_enabled | default(False) | bool | ternary('http://'+ (proxy_private_ip|default('')) +':3128', omit) }}"
#       https_proxy: "{{ proxy_enabled | default(False) | bool | ternary('http://'+ (proxy_private_ip|default('')) +':3128', omit) }}"
#       additional_trust_bundle_file: "{{ proxy_enabled | default(False) | bool | ternary('roles/proxy_create/files/squid-ca-cert.pem', omit) }}" # "roles/proxy_create/files/squid-ca-cert.pem"

# - fail:

- include_role:
    name: rosa_cluster
  vars:
    state: present
    rosa_cluster:
      name: "{{ cluster_name }}"
      aws_account_id: "{{ aws_account_id }}"
      account_roles_prefix: "{{ rosa_account_roles_prefix }}"
      region: "{{ rosa_region }}"
      private_link: "{{ rosa_private_link }}"
      vpc_cidr: "{{ rosa_vpc_cidr }}"
      multi_az: "{{ rosa_multi_az }}"
      version: "{{ rosa_version }}"
      hosted_cp: "{{ rosa_hosted_cp }}"
      min_replicas: "{{ rosa_min_replicas | default(omit) }}"
      max_replicas: "{{ rosa_max_replicas | default(omit) }}"
      compute_nodes: "{{ rosa_compute_nodes | default(rosa_multi_az | ternary('3', '2')) }}"
      compute_machine_type: "{{ rosa_compute_machine_type | default('m5.xlarge') }}"
      kms_key_arn: "{{ rosa_kms_key_arn | default(omit) }}"
      tags: "{{ extra_tags }}"
      http_proxy: "{{ proxy_enabled | default(False) | bool | ternary('http://'+ (proxy_private_ip|default('')) +':3128', omit) }}"
      https_proxy: "{{ proxy_enabled | default(False) | bool | ternary('http://'+ (proxy_private_ip|default('')) +':3128', omit) }}"
      additional_trust_bundle_file: "{{ proxy_enabled | default(False) | bool | ternary('roles/proxy_create/files/squid-ca-cert.pem', omit) }}" # "roles/proxy_create/files/squid-ca-cert.pem"
      no_proxy: "{{ proxy_enabled | default(False) | bool | ternary(rosa_no_proxy,omit) }}"
# ---
# - name: what cluster am i creating?
#   debug:
#     msg: |
#       ***************************************
#       Preparing to create {{ cluster_name }}.
#       This task may take up to an hour.
#       ***************************************

#     verbosity: 0

# # do this better ... maybe better set during vpc creation and inherited.
# - when: rosa_subnet_ids | length == 0
#   block:
#     - name: figure out list of subnets
#       set_fact:
#         _private_subnet_ids: "{{ _private_subnets.results | default([]) | json_query('[*].subnet.id') }}"
#         _public_subnet_ids:  "{{ _public_subnets.results  | default([]) | json_query('[*].subnet.id') }}"
#       when:
#         - _private_subnets is defined or _public_subnets is defined
#     - name: set subnet_ids when private-link cluster
#       set_fact:
#         rosa_subnet_ids: "{{ _private_subnet_ids }}"
#       when: (rosa_private_link | bool)
#     - name: set subnet_ids when public or private cluster
#       set_fact:
#         rosa_subnet_ids: "{{ _private_subnet_ids + _public_subnet_ids }}"
#       when: (not rosa_private_link | bool)

# - name: check if cluster exists
#   ocm_cluster_info:
#     name: "{{ cluster_name }}"
#   register: _cluster_info

# - name: configure proxy settings
#   set_fact:
#     rosa_http_proxy: "http://{{ proxy_private_ip }}:3128"
#     rosa_https_proxy: "http://{{ proxy_private_ip }}:3128"
#     rosa_additional_trust_bundle_file: "roles/proxy_create/files/squid-ca-cert.pem"
#     rosa_no_proxy: ".s3.{{ rosa_region }}.amazonaws.com"
#   when: proxy_enabled | bool

# - when: _cluster_info.cluster == {}
#   block:
#     # - set_fact:
#     #     _installer_role_arn: "arn:aws:iam::{{ aws_account_id }}:role/{{ rosa_cluster_prefix }}-Installer-Role"

#     - name: create oidc config
#       ocm_oidc_config:
#         state: present
#       register: _oidc_config
#       when: rosa_hosted_cp | default(False) | bool

#     - set_fact:
#         _oidc_id: "{{ _oidc_config.oidc_config.id }}"
#       when: rosa_hosted_cp | default(False) | bool

#     # HCP roles
#     - set_fact:
#         _role_arn: "arn:aws:iam::{{ aws_account_id }}:role/{{ rosa_cluster_prefix }}-Installer-Role"
#         _support_role_arn: "arn:aws:iam::{{ aws_account_id }}:role/{{ rosa_cluster_prefix }}-Support-Role"
#         _worker_iam_role: "arn:aws:iam::{{ aws_account_id }}:role/{{ rosa_cluster_prefix }}-Worker-Role"
#       when: rosa_hosted_cp | default(False) | bool

#     # Classic roles
#     - set_fact:
#         _role_arn: "arn:aws:iam::{{ aws_account_id }}:role/{{ rosa_cluster_prefix }}-Installer-Role"
#         _support_role_arn: "arn:aws:iam::{{ aws_account_id }}:role/{{ rosa_cluster_prefix }}-Support-Role"
#         _controlplane_iam_role: "arn:aws:iam::{{ aws_account_id }}:role/{{ rosa_cluster_prefix }}-ControlPlane-Role"
#         _worker_iam_role: "arn:aws:iam::{{ aws_account_id }}:role/{{ rosa_cluster_prefix }}-Worker-Role"
#       when: not rosa_hosted_cp | default(False) | bool

#     - name: create cluster
#       ocm_cluster:
#         # state: dry-run
#         name: "{{ cluster_name }}"
#         region: "{{ rosa_region }}"
#         private: "{{ rosa_private }}"
#         private_link: "{{ rosa_private_link }}"
#         sts: "{{ rosa_sts }}"
#         aws_account_id: "{{ aws_account_id | default(omit) }}"
#         machine_cidr: "{{ rosa_vpc_cidr }}"
#         multi_az: "{{ rosa_multi_az | bool }}"
#         subnet_ids: "{{ rosa_subnet_ids | join(',') }}"
#         version: "{{ rosa_version | default(omit) }}"
#         hosted_cp: "{{ rosa_hosted_cp | default(omit) }}"
#         oidc_config_id: "{{ _oidc_id | default(omit) }}"
#         http_proxy: "{{ rosa_http_proxy | default(omit) }}"
#         https_proxy: "{{ rosa_https_proxy | default(omit) }}"
#         no_proxy: "{{ rosa_no_proxy | default(omit) }}"
#         additional_trust_bundle_file: "{{ rosa_additional_trust_bundle_file | default(omit) }}"
#         disable_workload_monitoring: "{{ rosa_disable_workload_monitoring | bool }}"
#         min_replicas: "{{ rosa_min_replicas | default(omit) }}"
#         max_replicas: "{{ rosa_max_replicas | default(omit) }}"
#         compute_nodes: "{{ rosa_compute_nodes | default(omit) }}"
#         compute_machine_type: "{{ rosa_compute_machine_type | default(omit) }}"
#         role_arn: "{{ _role_arn }}"
#         support_role_arn: "{{ _support_role_arn }}"
#         controlplane_iam_role: "{{ _controlplane_iam_role | default(omit) }}"
#         worker_iam_role: "{{ _worker_iam_role }}"
#         operator_roles_prefix: "{{ cluster_name }}"
#         kms_key_arn: "{{ rosa_kms_key_arn | default(None) }}"
#         tags: "{{ extra_tags }}"
#       register: _rosa_cluster

# - debug:
#     msg: "debug rosa"
# - debug:
#     var: _rosa_cluster

# - name: get info about the cluster
#   ocm_cluster_info:
#     name: "{{ cluster_name }}"
#   register: _cluster_info

# - when:
#     - rosa_sts | bool
#     - _cluster_info.cluster.state == 'waiting'
#   block:
#     - include_role:
#         name: operator_roles_create
#       vars:
#         cluster_id: "{{ _cluster_info.cluster.id }}"
#         oidc_endpoint_url: "{{ _cluster_info.cluster.aws.sts.oidc_endpoint_url }}"
#         oidc_id: "{{ _oidc_id | default(omit) }}"
#       when: rosa_sts | bool

#     - include_role:
#         name: kms_create
#       when:
#         - rosa_kms_key_arn != ""
#         - rosa_kms_key_arn != None
#         - rosa_sts | bool

#     - debug:
#         msg: |
#           *******************************************
#           * Waiting for cluster to start installing *
#           *******************************************

#     - name: waiting for cluster to start installing
#       ocm_cluster_info:
#         name: "{{ cluster_name }}"
#       register: _cluster_info
#       until: _cluster_info.cluster.state in ["installing","error"]
#       retries: 10
#       delay: 60
#       no_log: true

# - when: rosa_wait | bool
#   block:
#     - debug:
#         msg: |
#           ***********************************
#           * Waiting for cluster to be ready *
#           ***********************************

#           You can watch progress logs by running:
#             $ rosa logs -c  {{ cluster_name }} install -w

#     - name: wait for cluster to be ready
#       ocm_cluster_info:
#         name: "{{ cluster_name }}"
#       register: _cluster_info
#       until: _cluster_info.cluster.state in ["ready","error"]
#       retries: 120
#       delay: 60
#       no_log: true

# - fail:
#     msg: |
#       *****************************************
#       Cluster Install Failed
#       {{ _cluster_info.cluster | to_nice_yaml }}
#       *****************************************
#   when: _cluster_info.cluster.state == 'error'
